{"_id":"H8uwPHrLOULoZzxQ","name":"Torg Eternity Decks","type":"script","author":"cnBzQyuQJOQ8XM2O","img":"icons/sundries/scrolls/scroll-runed-brown-blue.webp","scope":"global","command":"//\n// Torg Eternity Decks (Torg Eternity) v1.5\n// by Viriato139ac\n//\n\n// What it does: Replace the system decks by your custom decks and creates hands for your stormknights with the same permissions of the original actors\n// Instructions: 1: Create your custom destiny, drama and cosm decks in your world (you can use my deckImport macro to import images from a directory directly into a deck), 2: Execute the macro and select custom decks, 3: Click on Go!\n// Notes: This will reset all hands and piles and overwrite the system default decks in the world, if you want them back, just create a new world, the original decks will be recreated, you can then export to a json file and import into this world\n\n// const labelTitle = `Torg Eternity Decks`;\n// const windowTitle = `Decks' configuration`;\n// const destinyDeck = `Destiny deck`;\n// const dramaDeck = `Drama deck`;\n// const cosmDeck = `Cosm deck`;\n// const onlyChange = `Only change Cosm Deck, leave player hands`;\n// const instructions1 = `<b>What it does</b>: Replace the system decks by your custom decks and creates hands for your stormknights with the same permissions of the original actors`;\n// const instructions2 = `<b>Instructions</b>: <b>1</b>: Create your custom destiny, drama and cosm decks in your world (you can use my deckImport macro to import images from a directory directly into a deck), <b>2</b>: Execute the macro and select custom decks, <b>3</b>: Click on Go!`;\n// const instructions3 = `<b>Notes</b>: This will reset all hands and piles and overwrite the system default decks in the world, if you want them back, just create a new world, the original decks will be recreated, you can then export to a json file and import into this world`;\n// const labelGo = `Go!`;\n// const labelCancel = `Cancel`;\n\nconst labelTitle = `${game.i18n.localize(\"scripts.teDecks.labelTitle\")}`;\nconst windowTitle = `${game.i18n.localize(\"scripts.teDecks.windowTitle\")}`;\nconst destinyDeck = `${game.i18n.localize(\"CARD.TypeDestiny\")}`;\nconst dramaDeck = `${game.i18n.localize(\"CARD.TypeDrama\")}`;\nconst cosmDeck = `${game.i18n.localize(\"CARD.TypeCosm\")}`;\nconst onlyChange = `${game.i18n.localize(\"scripts.teDecks.onlyChange\")}`;\nconst instructions1 = `${game.i18n.localize(\"scripts.teDecks.instructions1\")}`;\nconst instructions2 = `${game.i18n.localize(\"scripts.teDecks.instructions2\")}`;\nconst instructions3 = `${game.i18n.localize(\"scripts.teDecks.instructions3\")}`;\nconst labelGo = `${game.i18n.localize(\"scripts.teDecks.labelGo\")}`;\nconst labelCancel = `${game.i18n.localize(\"scripts.teDecks.labelCancel\")}`;\n\n// constants\n\nlet applyChanges = false;\n\nconst myDialogOptions = {\n  width: 640,\n  //height: 800,\n  //top: 500,\n  //left: 500\n};\n\nlet myCards = game.cards;\nconst cardsListd = myCards.map((t) => ({\n  _id: t.id,\n  name: t.data.name,\n  type: t.data.type,\n  select:\n    `<option value=\"` +\n    t.data.name +\n    `\"` +\n    (t.data.name === \"Destiny Deck\" ? ` selected=\"selected\"` : \"\") +\n    `>` +\n    t.data.name +\n    `</option>`,\n}));\nlet decksListd = cardsListd.filter((t) => t.type === \"deck\");\nlet optionsdecksListd = decksListd\n  .map(function (elem) {\n    return elem.select;\n  })\n  .join();\n\nconst cardsListr = myCards.map((t) => ({\n  _id: t.id,\n  name: t.data.name,\n  type: t.data.type,\n  select:\n    `<option value=\"` +\n    t.data.name +\n    `\"` +\n    (t.data.name === \"Drama Deck\" ? ` selected=\"selected\"` : \"\") +\n    `>` +\n    t.data.name +\n    `</option>`,\n}));\nlet decksListr = cardsListr.filter((t) => t.type === \"deck\");\nlet optionsdecksListr = decksListr\n  .map(function (elem) {\n    return elem.select;\n  })\n  .join();\n\nconst cardsListc = myCards.map((t) => ({\n  _id: t.id,\n  name: t.data.name,\n  type: t.data.type,\n  select:\n    `<option value=\"` +\n    t.data.name +\n    `\"` +\n    (t.data.name === \"Cosm Deck\" ? ` selected=\"selected\"` : \"\") +\n    `>` +\n    t.data.name +\n    `</option>`,\n}));\nlet decksListc = cardsListc.filter((t) => t.type === \"deck\");\nlet optionsdecksListc = decksListc\n  .map(function (elem) {\n    return elem.select;\n  })\n  .join();\n\n// form definition\n\nnew Dialog(\n  {\n    title: labelTitle,\n    content: `\n  <form>\n    <style type=\"text/css\">\n    .tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0;}\n    .tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:2px 2px;word-break:normal;}\n    .tg .tg-bzmm{background-color:#34696d;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-d6y8{border-color:#efefef;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-ly6r{border-color:#efefef;text-align:left;vertical-align:middle}\n    .tg .tg-r5a9{background-color:#34696d;border-color:#efefef;color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-049l{background-color:#f0f0f0;border-color:#efefef;font-family:\"Courier New\", Courier, monospace !important;;font-size:12px;text-align:left;vertical-align:middle}  \n    </style>\n    <table class=\"tg\">\n    <tbody>\n      <tr>\n        <td class=\"tg-r5a9\" colspan=\"4\"><span style=\"color:#FFF\"><b>${windowTitle}</b></span></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"1\">${destinyDeck}:</td>\n        <td class=\"tg-d6y8\" colspan=\"3\"><select id=\"ddeck\" name=\"ddeck\">${optionsdecksListd}</select></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"1\">${dramaDeck}:</td>\n        <td class=\"tg-d6y8\" colspan=\"3\"><select id=\"rdeck\" name=\"rdeck\">${optionsdecksListr}</select></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"1\">${cosmDeck}:</td>\n        <td class=\"tg-d6y8\" colspan=\"3\"><select id=\"cdeck\" name=\"cdeck\">${optionsdecksListc}</select></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"3\">${onlyChange}:</td>\n        <td class=\"tg-d6y8\" colspan=\"1\"><input type=\"checkbox\" id=\"cbonlyCosm\" name=\"cbonlyCosm\" value=\"cbonlyCosm\"></td>\n      </tr>\t  \n      <tr>\n        <td class=\"tg-049l\" colspan=\"4\">\n\t\t\t\t${instructions1}</br>\n\t\t\t\t${instructions2}</br>\n\t\t\t\t${instructions3}\n\t\t\t\t</td>\n      </tr>\n\n    </tbody>\n    </table>\n\n  </form>\n  `,\n    buttons: {\n      apply: {\n        icon: \"<i class='fas fa-check-circle'></i>\",\n        label: labelGo,\n        callback: () => {\n          applyChanges = true;\n        },\n      },\n      cancel: {\n        icon: \"<i class='fas fa-times-circle'></i>\",\n        label: labelCancel,\n        callback: () => {\n          applyChanges = false;\n        },\n      },\n    },\n    default: \"apply\",\n    close: async (html) => {\n      if (applyChanges) {\n        let destinyDeck =\n          html.find('[name=\"ddeck\"]')[0].value || \"Destiny Deck\";\n        let dramaDeck = html.find('[name=\"rdeck\"]')[0].value || \"Drama Deck\";\n        let cosmDeck = html.find('[name=\"cdeck\"]')[0].value || \"Cosm Deck\";\n        let onlyCosm = html.find('[name=\"cbonlyCosm\"]')[0].checked;\n        console.log(onlyCosm);\n\n        // cosm deck and discard\n\n        if (!(cosmDeck === \"Cosm Deck\")) {\n          const cosmExists = await game.cards.some(\n            (c) => c.name === \"Cosm Deck\"\n          );\n          if (cosmExists) {\n            await game.cards.getName(\"Cosm Deck\").reset();\n            await game.cards.getName(\"Cosm Deck\").delete();\n          }\n          await game.cards.getName(cosmDeck).update({ name: \"Cosm Deck\" });\n        }\n\n        const cosmdExists = await game.cards.some(\n          (c) => c.name === \"Cosm Discard\"\n        );\n        if (cosmdExists) await game.cards.getName(\"Cosm Discard\").delete();\n        await Cards.create({ name: \"Cosm Discard\", type: \"pile\" });\n\n        if (!onlyCosm) {\n          // destiny deck and discard\n\n          if (!(destinyDeck === \"Destiny Deck\")) {\n            const destinyExists = await game.cards.some(\n              (c) => c.name === \"Destiny Deck\"\n            );\n            if (destinyExists) {\n              await game.cards.getName(\"Destiny Deck\").reset();\n              await game.cards.getName(\"Destiny Deck\").delete();\n            }\n            await game.cards\n              .getName(destinyDeck)\n              .update({ name: \"Destiny Deck\" });\n          }\n\n          const destinydExists = await game.cards.some(\n            (c) => c.name === \"Destiny Discard\"\n          );\n          if (destinydExists)\n            await game.cards.getName(\"Destiny Discard\").delete();\n          hand = await Cards.create({ name: \"Destiny Discard\", type: \"pile\" });\n          dataPerm = game.cards.getName(\"Destiny Discard\").data.permission;\n          dataPerm[\"default\"] = 2;\n          hand.update({ permission: dataPerm });\n\n          // drama deck, discard and active\n\n          if (!(dramaDeck === \"Drama Deck\")) {\n            const dramaExists = await game.cards.some(\n              (c) => c.name === \"Drama Deck\"\n            );\n            if (dramaExists) {\n              await game.cards.getName(\"Drama Deck\").reset();\n              await game.cards.getName(\"Drama Deck\").delete();\n            }\n            await game.cards.getName(dramaDeck).update({ name: \"Drama Deck\" });\n          }\n\n          const dramadExists = await game.cards.some(\n            (c) => c.name === \"Drama Discard\"\n          );\n          if (dramadExists) await game.cards.getName(\"Drama Discard\").delete();\n          hand = await Cards.create({ name: \"Drama Discard\", type: \"pile\" });\n          dataPerm = game.cards.getName(\"Drama Discard\").data.permission;\n          dataPerm[\"default\"] = 2;\n          hand.update({ permission: dataPerm });\n\n          const adramadExists = await game.cards.some(\n            (c) => c.name === \"Active Drama Card\"\n          );\n          if (adramadExists)\n            await game.cards.getName(\"Active Drama Card\").delete();\n          await Cards.create({ name: \"Active Drama Card\", type: \"pile\" });\n\n          // players hands\n\n          const stormknights = game.actors.filter(\n            (a) => a.data.type === \"stormknight\"\n          );\n          let handExists = false;\n\n          for (const a of stormknights) {\n            handExists = await game.cards.some((c) => c.name === `${a.name}`);\n            console.log(a.name + \": \" + handExists);\n            if (handExists) await game.cards.getName(a.name).delete();\n            dataPerm = game.actors.getName(a.name).data.permission;\n            dataPerm[\"default\"] = 2;\n            // console.log(dataPerm)\n            hand = await Cards.create({ name: `${a.name}`, type: \"hand\" });\n            hand.update({ permission: dataPerm });\n          }\n        }\n      }\n    },\n  },\n  myDialogOptions\n).render(true);","folder":null,"sort":0,"permission":{"default":0,"cnBzQyuQJOQ8XM2O":3},"flags":{"core":{"sourceId":"Macro.mNb5XS1rHTyaijvG"},"exportSource":{"world":"pruebastorg","system":"torgeternity","coreVersion":"9.249","systemVersion":"2.3.3"}},"_id":"e1HsJUgWXGNx5CYz"}
{"_id":"fd6ldFei3dwNDZ9D","name":"Deck Creator","type":"script","author":"lT3qVlEdsPoUeFl7","img":"icons/sundries/gaming/playing-cards.webp","scope":"global","command":"//\n// Deck Creator (Generic) v1.3\n// by Viriato139ac\n// based on previous code by @Skimble#8601\n\n// Texts of the form\n\n// const labeltitle = \"Deck Creator\";\n// const labelapply = \"Import\";\n// const labelcancel = \"Cancel\";\n// const labelcardsDefinition = \"Deck definition\";\n// const labelfacespath = \"Face images directory\";\n// const labelbackspath = \"Back images directory\";\n// const labeldeckback = \"Deck's back image\";\n// const labeldeckname = \"Deck name\";\n// const labelnameback = \"Back card name\";\n// const labelcardtype = \"Card type\";\n// const labelfacespathHint = \"Path where the images for faces are stored\";\n// const labelbackspathHint = \"Path where back images are stored. The images are cycled to the length of the faces images. If you specify a directory where there is only one image, the image is used for al faces, if there are as many as faces, backs will match each face in the same order\";\n// const labeldeckbackHint = \"Back image of the deck (it will change current back image of the deck)\";\n// const labeldecknameHint = \"Name of the deck to insert the cards. Must be created in advance\";\n// const labelnamebackHint = \"Text that is used for back of the card. It is not generally used\";\n// const labelcardtypeHint = \"Type of the cards in the deck\";\n// const labelnamebackexample = \"Back card\";\n// const TypeBase = \"Base\";\n// const TypeDestiny = \"Destiny\";\n// const TypeDrama = \"Drama\";\n// const TypeCosm = \"Cosm\";\n\nconst labeltitle = `${game.i18n.localize(\"scripts.deckCreator.title\")}`;\nconst labelapply = `${game.i18n.localize(\"scripts.deckCreator.apply\")}`;\nconst labelcancel = `${game.i18n.localize(\"scripts.deckCreator.cancel\")}`;\nconst labelcardsDefinition = `${game.i18n.localize(\"scripts.deckCreator.cardsDefinition\")}`;\nconst labelfacespath = `${game.i18n.localize(\"scripts.deckCreator.facespath\")}`;\nconst labelfacespathHint = `${game.i18n.localize(\"scripts.deckCreator.facespathHint\")}`;\nconst labelbackspath = `${game.i18n.localize(\"scripts.deckCreator.backspath\")}`;\nconst labelbackspathHint = `${game.i18n.localize(\"scripts.deckCreator.backspathHint\")}`;\nconst labeldeckback = `${game.i18n.localize(\"scripts.deckCreator.deckback\")}`;\nconst labeldeckbackHint = `${game.i18n.localize(\"scripts.deckCreator.deckbackHint\")}`;\nconst labeldeckname = `${game.i18n.localize(\"scripts.deckCreator.deckname\")}`;\nconst labeldecknameHint = `${game.i18n.localize(\"scripts.deckCreator.decknameHint\")}`;\nconst labelnameback = `${game.i18n.localize(\"scripts.deckCreator.nameback\")}`;\nconst labelnamebackHint = `${game.i18n.localize(\"scripts.deckCreator.namebackHint\")}`;\nconst labelnamebackexample = `${game.i18n.localize(\"scripts.deckCreator.namebackexample\")}`;\nconst labelcardtype = `${game.i18n.localize(\"scripts.deckCreator.cardtype\")}`;\nconst labelcardtypeHint = `${game.i18n.localize(\"scripts.deckCreator.cardtypeHint\")}`;\nconst TypeBase = `${game.i18n.localize(\"scripts.deckCreator.TypeBase\")}`;\nconst TypeDestiny = `${game.i18n.localize(\"torgeternity.cardTypes.destiny\")}`;\nconst TypeDrama = `${game.i18n.localize(\"torgeternity.cardTypes.drama\")}`;\nconst TypeCosm = `${game.i18n.localize(\"torgeternity.cardTypes.cosm\")}`;\n\n// functions\n\nfunction repeat(arr, toLength) {\n  let output = [...arr];\n  while (output.length < toLength) output = [...output, ...arr];\n  return output.slice(0, toLength);\n}\n\nasync function getFiles(target, extensions = ``, source = `user`) {\n  extensions = extensions instanceof Array ? extensions : [extensions];\n  let filePicker = await FilePicker.browse(source, target, { extensions });\n  if (filePicker.files) return [...filePicker.files];\n  return [];\n}\n\nfunction basename(str, sep) {\n  return str.substr(str.lastIndexOf(sep) + 1);\n}\n\nfunction strip_extension(str) {\n  return str.substr(0, str.lastIndexOf(\".\"));\n}\n\n// constants\n\nlet applyChanges = false;\n\nconst myDialogOptions = {\n  width: 640,\n  //height: 800,\n  //top: 500,\n  //left: 500\n};\n\nlet myCards = game.cards;\nconst cardsList = myCards.map((t) => ({\n  _id: t.id,\n  name: t.data.name,\n  type: t.data.type,\n  select: `<option value=\"` + t.data.name + `\">` + t.data.name + `</option>`,\n}));\n//console.log(cardsList);\nlet decksList = cardsList.filter((t) => t.type === \"deck\");\nlet optionsdecksList = decksList\n  .map(function (elem) {\n    return elem.select;\n  })\n  .join();\n//console.log(optionsdecksList);\n\nlet myTypes = [`<option value=\"base\">` + TypeBase + `</option>`];\nif (game.system.id === \"torgeternity\") {\n  myTypes.push(`<option value=\"destiny\">` + TypeDestiny + `</option>`);\n  myTypes.push(`<option value=\"drama\">` + TypeDrama + `</option>`);\n  myTypes.push(`<option value=\"cosm\">` + TypeCosm + `</option>`);\n}\nlet optionstypesList = myTypes.join();\n//console.log(optionstypesList);\n\n// form definition\n\nnew Dialog(\n  {\n    title: labeltitle,\n    content: `\n  <script>\nfunction selectfacespath() {\n  const fp1 = new FilePicker({\n    type: \"folder\",\n    button: \"image-picker\",\n    callback: (url) => {\n      $(\"#facespath\").val(url);\n    }\n  });\n  fp1.browse();\n}\n  </script>\n  <script>\nfunction selectbackspath() {\n  const fp1 = new FilePicker({\n    type: \"folder\",\n    button: \"image-picker\",\n    callback: (url) => {\n      $(\"#backspath\").val(url);\n    }\n  });\n  fp1.browse();\n}\n  </script>\n  <script>\nfunction selectdeckback() {\n  const fp1 = new FilePicker({\n    type: \"image\",\n    button: \"image-picker\",\n    callback: (url) => {\n      $(\"#deckback\").val(url);\n    }\n  });\n  fp1.browse();\n}\n  </script>\t\n  <form>\n    <style type=\"text/css\">\n    .tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0;}\n    .tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:2px 2px;word-break:normal;}\n    .tg .tg-bzmm{background-color:#34696d;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-d6y8{border-color:#efefef;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-ly6r{border-color:#efefef;text-align:left;vertical-align:middle}\n    .tg .tg-r5a9{background-color:#34696d;border-color:#efefef;color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-049l{background-color:#f0f0f0;border-color:#efefef;font-family:\"Courier New\", Courier, monospace !important;;font-size:12px;text-align:left;vertical-align:middle}  \n    </style>\n    <table class=\"tg\">\n    <tbody>\n      <tr>\n        <td class=\"tg-r5a9\" colspan=\"10\"><span style=\"color:#FFF\"><b>${labelcardsDefinition}</b></span></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">${labelfacespath}:</td>\n        <td class=\"tg-d6y8\" colspan=\"6\"><input type=\"text\" id=\"facespath\" name=\"facespath\" value=\"\"></td>\n        <td class=\"tg-d6y8\" colspan=\"2\"><button id=\"buttonfacespath\" onclick=\"selectfacespath()\" type=\"button\">${game.i18n.localize(\n          \"FILES.SelectFolder\"\n        )}</button></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">${labelbackspath}:</td>\n        <td class=\"tg-d6y8\" colspan=\"6\"><input type=\"text\" id=\"backspath\" name=\"backspath\" value=\"\"></td>\n        <td class=\"tg-d6y8\" colspan=\"2\"><button id=\"buttonbackspath\" onclick=\"selectbackspath()\" type=\"button\">${game.i18n.localize(\n          \"FILES.SelectFolder\"\n        )}</button></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">${labeldeckback}:</td>\n        <td class=\"tg-d6y8\" colspan=\"6\"><input type=\"text\" id=\"deckback\" name=\"deckback\" value=\"\"></td>\n        <td class=\"tg-d6y8\" colspan=\"2\"><button id=\"buttondeckback\" onclick=\"selectdeckback()\" type=\"button\">${game.i18n.localize(\n          \"FILES.SelectFile\"\n        )}</button></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">${labeldeckname}:</td>\n        <td class=\"tg-d6y8\" colspan=\"8\"><select id=\"deckname\" name=\"deckname\">${optionsdecksList}</select></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">${labelcardtype}:</td>\n        <td class=\"tg-d6y8\" colspan=\"8\"><select id=\"cardtype\" name=\"cardtype\">${optionstypesList}</select></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">${labelnameback}:</td>\n        <td class=\"tg-d6y8\" colspan=\"8\"><input type=\"text\" id=\"nameback\" name=\"nameback\" value=\"${labelnamebackexample}\"></td>\n      </tr>\n      <tr>\n        <td class=\"tg-049l\" colspan=\"10\">\n\t\t\t\t<b>${labelfacespath}</b>: ${labelfacespathHint}</br>\n\t\t\t\t<b>${labelbackspath}</b>: ${labelbackspathHint}</br>\n\t\t\t\t<b>${labeldeckback}</b>: ${labeldeckbackHint}</br>\n\t\t\t\t<b>${labeldeckname}</b>: ${labeldecknameHint}</br>\n\t\t\t\t<b>${labelcardtype}</b>: ${labelcardtypeHint}</br>\n\t\t\t\t<b>${labelnameback}</b>: ${labelnamebackHint}\n\t\t\t\t</td>\n      </tr>\n\n    </tbody>\n    </table>\n\n  </form>\n  `,\n    buttons: {\n      apply: {\n        icon: \"<i class='fas fa-check-circle'></i>\",\n        label: labelapply,\n        callback: () => {\n          applyChanges = true;\n        },\n      },\n      cancel: {\n        icon: \"<i class='fas fa-times-circle'></i>\",\n        label: labelcancel,\n        callback: () => {\n          applyChanges = false;\n        },\n      },\n    },\n    default: \"apply\",\n    close: async (html) => {\n      if (applyChanges) {\n        let facespath = html.find('[name=\"facespath\"]')[0].value || \"\";\n        let backspath = html.find('[name=\"backspath\"]')[0].value || \"\";\n        let deckname = html.find('[name=\"deckname\"]')[0].value || \"\";\n        let cardtype = html.find('[name=\"cardtype\"]')[0].value || \"base\";\n        let nameback = html.find('[name=\"nameback\"]')[0].value || \"Card back\";\n        let deckback =\n          html.find('[name=\"deckback\"]')[0].value || \"icons/svg/card-hand.svg\";\n\n        //console.log(\"Faces: \" + facespath);\n        //console.log(\"Backs: \" + backspath);\n        //console.log(\"Deck: \" + deckname);\n        //console.log(\"Name: \" + nameback);\n        if (facespath === \"\" || backspath === \"\" || deckname === \"\") {\n          console.log(\"Error in paths or deck name\");\n        } else {\n          //console.log(repeat([1, 2, 3], 7));\n          //console.log(repeat([1, 2, 3], 2));\n\n          let facecards = await getFiles(\n            facespath,\n            (extensions = [`.jpg`, `.jpeg`, `.png`, `.webp`])\n          );\n          let backcards1 = await getFiles(\n            backspath,\n            (extensions = [`.jpg`, `.jpeg`, `.png`, `.webp`])\n          );\n          let backcards = repeat(backcards1, facecards.length);\n          //console.log(facecards);\n          //console.log(backcards);\n\n          let deck = game.cards.getName(deckname);\n          deck.update({ img: deckback });\n\n          let newcardsdef = [];\n          let cardName;\n          let faceName;\n          let backName;\n\n          for (let i = 0; i < facecards.length; i++) {\n            faceName = facecards[i];\n            backName = backcards[i];\n            cardName = decodeURIComponent(\n              strip_extension(basename(faceName, \"/\"))\n            );\n            //console.log(cardName);\n\n            newcardsdef.push({\n              name: cardName,\n              origin: deck.id,\n              description: cardName,\n              type: cardtype,\n              back: { img: backName, name: nameback },\n              faces: [{ img: faceName, name: cardName }],\n              face: 0,\n            });\n          }\n          //console.log(newcardsdef);\n\n          deck.createEmbeddedDocuments(\"Card\", newcardsdef);\n        }\n      }\n    },\n  },\n  myDialogOptions\n).render(true);","folder":null,"sort":0,"permission":{"default":0,"lT3qVlEdsPoUeFl7":3},"flags":{"exportSource":{"world":"pruebastorg","system":"torgeternity","coreVersion":"9.249","systemVersion":"2.3.3"},"core":{"sourceId":"Macro.fd6ldFei3dwNDZ9D"}},"_id":"meOY1YxlPCCl0mLX"}
